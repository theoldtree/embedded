
CLCDADisplay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000156  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001aa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b07  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000085c  00000000  00000000  00000d4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000368  00000000  00000000  000015ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001914  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000434  00000000  00000000  00001958  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000026e  00000000  00000000  00001d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001ffa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	3d d0       	rcall	.+122    	; 0x114 <main>
  9a:	5b c0       	rjmp	.+182    	; 0x152 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <CLCD_data>:
	CLCD_data('A');
    
}

void CLCD_data(char data){
	PORTD = 0x04;		// E(bit4) = R/W(bit3) = 0, RS(bit2) = 1의 의미는 내부 데이터 레지스터 포인팅
  9e:	24 e0       	ldi	r18, 0x04	; 4
  a0:	22 bb       	out	0x12, r18	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	35 e0       	ldi	r19, 0x05	; 5
  a4:	3a 95       	dec	r19
  a6:	f1 f7       	brne	.-4      	; 0xa4 <CLCD_data+0x6>
  a8:	00 00       	nop
	
	_delay_us(1);		// Setup Time
	PORTD = 0x14;		// E(bit4) = RS(bit1) = 1, R/W(bit3) = 0의 의미는 Write
  aa:	94 e1       	ldi	r25, 0x14	; 20
  ac:	92 bb       	out	0x12, r25	; 18
	PORTC = data & 0xf0;
  ae:	38 2f       	mov	r19, r24
  b0:	30 7f       	andi	r19, 0xF0	; 240
  b2:	35 bb       	out	0x15, r19	; 21
	PORTD = 0x04;
  b4:	22 bb       	out	0x12, r18	; 18
  b6:	3a e0       	ldi	r19, 0x0A	; 10
  b8:	3a 95       	dec	r19
  ba:	f1 f7       	brne	.-4      	; 0xb8 <CLCD_data+0x1a>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <CLCD_data+0x20>
	
	_delay_us(2);		// Hold & Setup Time
	PORTD = 0x14;
  be:	92 bb       	out	0x12, r25	; 18
	
	PORTC = (data << 4) & 0xf0;
  c0:	30 e1       	ldi	r19, 0x10	; 16
  c2:	83 9f       	mul	r24, r19
  c4:	c0 01       	movw	r24, r0
  c6:	11 24       	eor	r1, r1
  c8:	85 bb       	out	0x15, r24	; 21
	PORTD = 0x04;
  ca:	22 bb       	out	0x12, r18	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	8f e9       	ldi	r24, 0x9F	; 159
  ce:	9f e0       	ldi	r25, 0x0F	; 15
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <CLCD_data+0x32>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <CLCD_data+0x38>
  d6:	00 00       	nop
  d8:	08 95       	ret

000000da <CLCD_cmd>:
	
	_delay_ms(1);
}

void CLCD_cmd(char cmd){
	PORTD = 0x00;		// E(bit4) = R/W(bit3) = RS(bit2) = 0
  da:	12 ba       	out	0x12, r1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	25 e0       	ldi	r18, 0x05	; 5
  de:	2a 95       	dec	r18
  e0:	f1 f7       	brne	.-4      	; 0xde <CLCD_cmd+0x4>
  e2:	00 00       	nop
	
	_delay_us(1);
	PORTD = 0x10;		// E(bit4) = 1
  e4:	90 e1       	ldi	r25, 0x10	; 16
  e6:	92 bb       	out	0x12, r25	; 18
	
	PORTC = cmd & 0xf0;		// 8bit 명령어 중 상위 4비트만 준비
  e8:	28 2f       	mov	r18, r24
  ea:	20 7f       	andi	r18, 0xF0	; 240
  ec:	25 bb       	out	0x15, r18	; 21
	PORTD = 0x00;		// E: 1 -> 0
  ee:	12 ba       	out	0x12, r1	; 18
  f0:	2a e0       	ldi	r18, 0x0A	; 10
  f2:	2a 95       	dec	r18
  f4:	f1 f7       	brne	.-4      	; 0xf2 <CLCD_cmd+0x18>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <CLCD_cmd+0x1e>
	
	_delay_us(2);		// Hold & Setup Time
	PORTD = 0x10;		// E(bit4) = 1
  f8:	92 bb       	out	0x12, r25	; 18
	
	PORTC = (cmd <<4) & 0xf0;		// 8bit 명령어 중 하위 4비트 준비
  fa:	20 e1       	ldi	r18, 0x10	; 16
  fc:	82 9f       	mul	r24, r18
  fe:	c0 01       	movw	r24, r0
 100:	11 24       	eor	r1, r1
 102:	85 bb       	out	0x15, r24	; 21
	PORTD = 0x00;		// E: 1 -> 0, data전송 start
 104:	12 ba       	out	0x12, r1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 106:	8f e9       	ldi	r24, 0x9F	; 159
 108:	9f e0       	ldi	r25, 0x0F	; 15
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <CLCD_cmd+0x30>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <CLCD_cmd+0x36>
 110:	00 00       	nop
 112:	08 95       	ret

00000114 <main>:
// PC4 ~ 7 -> DB4 ~ 7 => Data
// PD2 ~ 4 -> RS, RW, E

int main(void)
{
	DDRC = 0xff;	// CLCD Data 신호 담당
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xff;	// CLCD Control 신호 담당
 118:	81 bb       	out	0x11, r24	; 17
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	80 e7       	ldi	r24, 0x70	; 112
 11e:	92 e0       	ldi	r25, 0x02	; 2
 120:	21 50       	subi	r18, 0x01	; 1
 122:	80 40       	sbci	r24, 0x00	; 0
 124:	90 40       	sbci	r25, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <main+0xc>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0x16>
 12a:	00 00       	nop
	
	_delay_ms(50);
	CLCD_cmd(BIT4_LINE_DOT58);
 12c:	88 e2       	ldi	r24, 0x28	; 40
 12e:	d5 df       	rcall	.-86     	; 0xda <CLCD_cmd>
	CLCD_cmd(DISPON_CUROFF_BLKOFF);
 130:	8c e0       	ldi	r24, 0x0C	; 12
 132:	d3 df       	rcall	.-90     	; 0xda <CLCD_cmd>
	CLCD_cmd(INC_NOSHIFT);
 134:	86 e0       	ldi	r24, 0x06	; 6
 136:	d1 df       	rcall	.-94     	; 0xda <CLCD_cmd>
	CLCD_cmd(DISPCLEAR);
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	cf df       	rcall	.-98     	; 0xda <CLCD_cmd>
 13c:	8f e3       	ldi	r24, 0x3F	; 63
 13e:	9f e1       	ldi	r25, 0x1F	; 31
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <main+0x2c>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0x32>
 146:	00 00       	nop
	
	_delay_ms(2);	// 디스프레이 clear 실행 시간 동안 대기
	CLCD_data('A');
 148:	81 e4       	ldi	r24, 0x41	; 65
 14a:	a9 df       	rcall	.-174    	; 0x9e <CLCD_data>
 14c:	80 e0       	ldi	r24, 0x00	; 0
    
}
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	08 95       	ret

00000152 <_exit>:
 152:	f8 94       	cli

00000154 <__stop_program>:
 154:	ff cf       	rjmp	.-2      	; 0x154 <__stop_program>
